/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface;

import controller.MyConnection;
import controller.inventoryBalanceDb;
import controller.itemDb;
import controller.purchaseDb;
import controller.salesDb;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.JLabel;
import Model.purchase;
import java.awt.Dimension;
import java.awt.HeadlessException;
import java.awt.Toolkit;
import javax.swing.table.TableModel;
import java.text.ParseException;

/**
 *
 * @author samrit
 */
public class PurchaseDetail extends javax.swing.JInternalFrame {

    /**
     * Creates new form PurchaseDetail
     */
    
    String purId;
    String pdate;
    int itemid;
    String itemName;
    String iUnit;
    float quantity;
    String tranid;
    Connection con;
    PreparedStatement ps ;
    ResultSet rs;
    PreparedStatement ps1;
    ResultSet rs1;
    Date cadate;
    purchaseDb purDb = new purchaseDb();
    DefaultTableModel model ;
    inventoryBalanceDb invDb = new inventoryBalanceDb();
    salesDb salDb = new salesDb();
    itemDb itemDb = new itemDb();
    float vat ;
    float updatQty =0;
    float currentqty ;
    float purchaseQty;
    int id;
    public PurchaseDetail() {
        initComponents();
        
        purDb.autoIdDetail();
        Dimension screensize = Toolkit.getDefaultToolkit().getScreenSize();
        int width = (int)screensize.getWidth();
        int height = (int)screensize.getHeight();
        setSize(width-180, height-40);
       
        
        
           try{
           con = MyConnection.getConnection();
           String sql = "SELECT * FROM item ORDER BY itemName";
           ps = con.prepareStatement(sql);
           rs = ps.executeQuery();
           while(rs.next()){
               itemName = rs.getString("itemName");
               cmbItemName.addItem(itemName);
           }
           
       }catch (SQLException ex) {
          JOptionPane.showMessageDialog(null, ex);
        }
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        puId = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        puDate = new com.toedter.calendar.JDateChooser();
        jLabel11 = new javax.swing.JLabel();
        itemId = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        cmbItemName = new javax.swing.JComboBox<>();
        jLabel14 = new javax.swing.JLabel();
        puQty = new javax.swing.JTextField();
        purInsert = new javax.swing.JButton();
        purDelet = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        iUnt = new javax.swing.JComboBox<>();
        jLabel15 = new javax.swing.JLabel();
        puVat = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        tranIdpur = new javax.swing.JTextField();
        purUpdate = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        purchaseTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        txtSearch = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1024, 670));
        setPreferredSize(new java.awt.Dimension(1170, 670));
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(0, 138, 207));
        jPanel2.setMinimumSize(new java.awt.Dimension(0, 670));
        jPanel2.setName(""); // NOI18N
        jPanel2.setPreferredSize(new java.awt.Dimension(1170, 670));

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setPreferredSize(new java.awt.Dimension(1146, 45));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Sitka Small", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Purchase Form");
        jPanel3.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(345, 11, 457, -1));

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setMinimumSize(new java.awt.Dimension(990, 180));
        jPanel4.setPreferredSize(new java.awt.Dimension(1000, 180));
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel8.setFont(new java.awt.Font("Sitka Small", 1, 14)); // NOI18N
        jLabel8.setText("Purchase Id");
        jPanel4.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(95, 78, 105, 28));

        puId.setFont(new java.awt.Font("Sitka Small", 1, 14)); // NOI18N
        puId.setPreferredSize(new java.awt.Dimension(5, 25));
        puId.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                puIdKeyTyped(evt);
            }
        });
        jPanel4.add(puId, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 79, 132, 28));

        jLabel9.setFont(new java.awt.Font("Sitka Small", 1, 14)); // NOI18N
        jLabel9.setText("Date");
        jPanel4.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(95, 118, 105, 28));
        jPanel4.add(puDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 118, 132, 28));

        jLabel11.setFont(new java.awt.Font("Sitka Small", 1, 14)); // NOI18N
        jLabel11.setText("Item Id");
        jPanel4.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 81, 91, 28));

        itemId.setEditable(false);
        itemId.setFont(new java.awt.Font("Sitka Small", 1, 14)); // NOI18N
        jPanel4.add(itemId, new org.netbeans.lib.awtextra.AbsoluteConstraints(455, 83, 165, -1));

        jLabel12.setFont(new java.awt.Font("Sitka Small", 1, 14)); // NOI18N
        jLabel12.setText("Item Name");
        jPanel4.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 32, 91, 28));

        cmbItemName.setFont(new java.awt.Font("Sitka Small", 1, 11)); // NOI18N
        cmbItemName.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Item Name" }));
        cmbItemName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbItemNameActionPerformed(evt);
            }
        });
        jPanel4.add(cmbItemName, new org.netbeans.lib.awtextra.AbsoluteConstraints(455, 32, 290, 31));

        jLabel14.setFont(new java.awt.Font("Sitka Small", 1, 14)); // NOI18N
        jLabel14.setText("Quantity");
        jPanel4.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(638, 86, 86, -1));

        puQty.setFont(new java.awt.Font("Sitka Small", 1, 14)); // NOI18N
        puQty.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                puQtyKeyTyped(evt);
            }
        });
        jPanel4.add(puQty, new org.netbeans.lib.awtextra.AbsoluteConstraints(755, 83, 96, -1));

        purInsert.setFont(new java.awt.Font("Sitka Small", 3, 14)); // NOI18N
        purInsert.setText("Insert");
        purInsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                purInsertActionPerformed(evt);
            }
        });
        jPanel4.add(purInsert, new org.netbeans.lib.awtextra.AbsoluteConstraints(931, 22, 85, 39));

        purDelet.setFont(new java.awt.Font("Sitka Small", 3, 14)); // NOI18N
        purDelet.setText("Delete");
        purDelet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                purDeletActionPerformed(evt);
            }
        });
        jPanel4.add(purDelet, new org.netbeans.lib.awtextra.AbsoluteConstraints(931, 115, 85, 36));

        jLabel13.setFont(new java.awt.Font("Sitka Small", 1, 14)); // NOI18N
        jLabel13.setText("Unit");
        jPanel4.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 120, 91, 28));

        iUnt.setFont(new java.awt.Font("Sitka Small", 1, 14)); // NOI18N
        iUnt.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Unit", "PCS", "KG", "SET", "PACKAGE" }));
        iUnt.setPreferredSize(new java.awt.Dimension(32, 25));
        jPanel4.add(iUnt, new org.netbeans.lib.awtextra.AbsoluteConstraints(455, 122, 165, -1));

        jLabel15.setFont(new java.awt.Font("Sitka Small", 1, 14)); // NOI18N
        jLabel15.setText("VAT");
        jPanel4.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(638, 128, 86, -1));

        puVat.setFont(new java.awt.Font("Sitka Small", 1, 14)); // NOI18N
        jPanel4.add(puVat, new org.netbeans.lib.awtextra.AbsoluteConstraints(755, 126, 96, -1));

        jLabel10.setFont(new java.awt.Font("Sitka Small", 1, 14)); // NOI18N
        jLabel10.setText("TransactionId");
        jPanel4.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(95, 32, -1, 28));

        tranIdpur.setEditable(false);
        tranIdpur.setFont(new java.awt.Font("Sitka Small", 1, 14)); // NOI18N
        tranIdpur.setPreferredSize(new java.awt.Dimension(5, 25));
        jPanel4.add(tranIdpur, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 32, 132, 28));

        purUpdate.setFont(new java.awt.Font("Sitka Small", 3, 14)); // NOI18N
        purUpdate.setText("Update");
        purUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                purUpdateActionPerformed(evt);
            }
        });
        jPanel4.add(purUpdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(931, 68, -1, 39));

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));
        jPanel5.setPreferredSize(new java.awt.Dimension(472, 391));

        purchaseTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Transaction Id", "Purchase Id", "Date", "ItemId", "ItemName", "Unit", "Quantity"
            }
        ));
        purchaseTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                purchaseTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(purchaseTable);

        jLabel2.setFont(new java.awt.Font("Sitka Small", 3, 14)); // NOI18N
        jLabel2.setText("Search");

        txtSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchActionPerformed(evt);
            }
        });
        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 306, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, 1158, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, 1158, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 1178, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 675, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

     public boolean verifText(){
            if( puId.getText().equals("")|| puDate.getDate()==null ||itemId.getText().equals("")
                 || cmbItemName.getSelectedIndex()==0  || iUnt.getSelectedIndex()==0 || puQty.getText().equals(""))
                 
            {                  
                JOptionPane.showMessageDialog(null, "One or More Empty Field");

                
                 return false; 
        
            }
          
            
         return true;
     
    }   
    
    private void puIdKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_puIdKeyTyped
        if(puId.getText().length() >= 30){
            evt.consume();
        }
    }//GEN-LAST:event_puIdKeyTyped

    private void cmbItemNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbItemNameActionPerformed
        try { 
            purDb.CompoItemNameDetail();
        } catch (SQLException ex) {
            Logger.getLogger(Purchase.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_cmbItemNameActionPerformed

    private void puQtyKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_puQtyKeyTyped

        char c = evt.getKeyChar();
        if(Character.isLetter(c)&&!evt.isAltDown()){
            evt.consume();
        }
    }//GEN-LAST:event_puQtyKeyTyped

    private void purInsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_purInsertActionPerformed

        if(verifText()){
            purId =  puId.getText();
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
            pdate = dateFormat.format(puDate.getDate());
            itemid =Integer.parseInt( itemId.getText());
            itemName = cmbItemName.getSelectedItem().toString();
            iUnit = iUnt.getSelectedItem().toString();
            quantity = Float.parseFloat(puQty.getText());
            tranid = tranIdpur.getText();

            if(!purDb.isTransactionIdExist(tranid)){
                
            try{
           
            purDb.insertPur(tranid, purId, pdate, itemid, quantity);
            invDb.insertPurInventory(tranid, pdate, itemid, quantity , 0);
            
             if(!itemDb.isItemidInItemQty(itemid)){
                itemDb.insertqty(itemid, quantity);
                
            }else{
            currentqty = itemDb.getendQty(itemid);
            updatQty = currentqty + quantity;
            itemDb.updateqty(itemid, updatQty);
             }
             JOptionPane.showMessageDialog(rootPane, "Purchase Successfully Inserted!");
            
            }catch(HeadlessException ex){
                JOptionPane.showMessageDialog(null, ex);
                
            }
              
              
            ArrayList <purchase> list = purchaseDb.TableGenerator();
            Object rowData[] = new Object[10];
            model =  (DefaultTableModel) purchaseTable.getModel();
            DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
            centerRenderer.setHorizontalAlignment( JLabel.CENTER );
            purchaseTable.getColumnModel().getColumn(0).setCellRenderer( centerRenderer );
            purchaseTable.getColumnModel().getColumn(1).setCellRenderer( centerRenderer );
            purchaseTable.getColumnModel().getColumn(2).setCellRenderer( centerRenderer );
            purchaseTable.getColumnModel().getColumn(3).setCellRenderer( centerRenderer );
            purchaseTable.getColumnModel().getColumn(4).setCellRenderer( centerRenderer );
            purchaseTable.getColumnModel().getColumn(5).setCellRenderer( centerRenderer );
            purchaseTable.getColumnModel().getColumn(6).setCellRenderer( centerRenderer );
           
            model.setRowCount(0);
            for(int i=0; i < list.size(); i++){

                rowData[0] = list.get(i).getTranId();
                rowData[1] = list.get(i).getPurId();
                rowData[2] = list.get(i).getDate();
                rowData[3] = list.get(i).getItemId();
                rowData[4] = list.get(i).getItemName();
                rowData[5] = list.get(i).getUnit();
                rowData[6] = list.get(i).getQty();
                

                model.addRow(rowData);
            }
         purDb.autoIdDetail();
        System.out.println("hi4");
        iUnt.setSelectedIndex(0);
        cmbItemName.setSelectedIndex(0);
        itemId.setText("");
        puQty.setText("");
       
        }
            else{
                JOptionPane.showMessageDialog(rootPane, "Transaction Id Alreay Exists");
            }
        }
    }//GEN-LAST:event_purInsertActionPerformed

    private void purDeletActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_purDeletActionPerformed

        tranid = tranIdpur.getText();
        itemid =  Integer.parseInt(itemId.getText());
        purId =  puId.getText();
        quantity = Float.parseFloat(puQty.getText());
        
            try{
                
             purDb.delete(tranid);
             invDb.delete(tranid);
             
             currentqty = itemDb.getendQty(itemid);
             System.out.println(currentqty);
             System.out.println(quantity);
             updatQty = currentqty - quantity;
             System.out.println(updatQty);
             itemDb.updateqty(itemid, updatQty);
             
             JOptionPane.showMessageDialog(rootPane, "Successfully Deleted");
             
            }catch(HeadlessException ex){
                JOptionPane.showMessageDialog(rootPane, ex);
                
            }

            ArrayList <purchase> list = purchaseDb.TableGenerator();
            Object rowData[] = new Object[10];
            model =  (DefaultTableModel) purchaseTable.getModel();
            DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
            centerRenderer.setHorizontalAlignment( JLabel.CENTER );
            purchaseTable.getColumnModel().getColumn(0).setCellRenderer( centerRenderer );
            purchaseTable.getColumnModel().getColumn(1).setCellRenderer( centerRenderer );
            purchaseTable.getColumnModel().getColumn(2).setCellRenderer( centerRenderer );
            purchaseTable.getColumnModel().getColumn(3).setCellRenderer( centerRenderer );
            purchaseTable.getColumnModel().getColumn(4).setCellRenderer( centerRenderer );
            purchaseTable.getColumnModel().getColumn(5).setCellRenderer( centerRenderer );
            purchaseTable.getColumnModel().getColumn(6).setCellRenderer( centerRenderer );
           
            model.setRowCount(0);
            for(int i=0; i < list.size(); i++){

                rowData[0] = list.get(i).getTranId();
                rowData[1] = list.get(i).getPurId();
                rowData[2] = list.get(i).getDate();
                rowData[3] = list.get(i).getItemId();
                rowData[4] = list.get(i).getItemName();
                rowData[5] = list.get(i).getUnit();
                rowData[6] = list.get(i).getQty();
                

                model.addRow(rowData);
            }
       
       
       
        purDb.autoIdDetail();
        System.out.println("hi4");
        //tranIdpur.setText("");
        iUnt.setSelectedIndex(0);
        cmbItemName.setSelectedIndex(0);
        itemId.setText("");
        puQty.setText("");
       
       
        
    }//GEN-LAST:event_purDeletActionPerformed

    private void purchaseTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_purchaseTableMouseClicked
                try {
                        int selectedRow = purchaseTable.getSelectedRow();
                        TableModel tm = purchaseTable.getModel();
                        tranIdpur.setText(tm.getValueAt(selectedRow, 0).toString());
                        puId.setText(tm.getValueAt(selectedRow, 1).toString());
            
            
                        cadate = new SimpleDateFormat("yyyy-MM-dd").parse(tm.getValueAt(selectedRow, 2).toString());
                        puDate.setDate(cadate);
            
                        iUnt.setSelectedItem(tm.getValueAt(selectedRow, 5).toString());
                        itemId.setText(tm.getValueAt(selectedRow,3).toString());
                        cmbItemName.setSelectedItem(tm.getValueAt(selectedRow,4).toString());
                        puQty.setText(tm.getValueAt(selectedRow, 6).toString());
            
                    } catch (ParseException ex) {
                        Logger.getLogger(Purchase.class.getName()).log(Level.SEVERE, null, ex);
                    }
    }//GEN-LAST:event_purchaseTableMouseClicked

    private void purUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_purUpdateActionPerformed
             purId =  puId.getText();
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
            pdate = dateFormat.format(puDate.getDate());
            itemid =Integer.parseInt( itemId.getText());
            itemName = cmbItemName.getSelectedItem().toString();
            iUnit = iUnt.getSelectedItem().toString();
            quantity = Float.parseFloat(puQty.getText());
            tranid = tranIdpur.getText();
//            vat = Float.parseFloat(puVat.getText());
            
            if(purDb.isPurchaseIdExist(purId)){
               
                   try{
                         con = MyConnection.getConnection();
                         PreparedStatement ps3 =  con.prepareStatement( "select itemId from purchase where id = '"+tranid+"'");
                         ResultSet    rs3= ps3.executeQuery();
                       if(rs3.next()){
                              id = rs3.getInt("itemId");
                              if(id == itemid ){
                                  
                                  System.out.println("if close");
                                  currentqty = itemDb.getendQty(itemid);
                                  System.out.println(currentqty);
                                  purchaseQty = purDb.getPurQty(tranid);
                               //   System.out.println(purchaseQty);
                                  updatQty = (currentqty - purchaseQty)+ quantity;
                                //  System.out.println(updatQty);
                                  itemDb.updateqty(itemid, updatQty);

                         }
                              else{
                                  System.out.println("else close");
                                  
                                  currentqty = itemDb.getendQty(id);
                                  purchaseQty = purDb.getPurQty(tranid);
                                  updatQty = currentqty - purchaseQty;
                                //  System.out.println(updatQty);
                                  itemDb.updateqty(id, updatQty);
                                  currentqty = itemDb.getendQty(itemid);
                                  updatQty = currentqty + quantity;
                                  itemDb.updateqty(itemid, updatQty);
                            
                              }
                       }
                            }catch(SQLException ex) {
                                 Logger.getLogger(SalesDetail.class.getName()).log(Level.SEVERE, null, ex);
                     }                    
                                  
                
                         
 
             purDb.updatePurchase(tranid, purId, pdate, itemid, quantity);
            ArrayList <purchase> list = purchaseDb.TableGenerator();
            Object rowData[] = new Object[10];
            model =  (DefaultTableModel) purchaseTable.getModel();
            DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
            centerRenderer.setHorizontalAlignment( JLabel.CENTER );
            purchaseTable.getColumnModel().getColumn(0).setCellRenderer( centerRenderer );
            purchaseTable.getColumnModel().getColumn(1).setCellRenderer( centerRenderer );
            purchaseTable.getColumnModel().getColumn(2).setCellRenderer( centerRenderer );
            purchaseTable.getColumnModel().getColumn(3).setCellRenderer( centerRenderer );
            purchaseTable.getColumnModel().getColumn(4).setCellRenderer( centerRenderer );
            purchaseTable.getColumnModel().getColumn(5).setCellRenderer( centerRenderer );
            purchaseTable.getColumnModel().getColumn(6).setCellRenderer( centerRenderer );
           
            model.setRowCount(0);
            for(int i=0; i < list.size(); i++){

                rowData[0] = list.get(i).getTranId();
                rowData[1] = list.get(i).getPurId();
                rowData[2] = list.get(i).getDate();
                rowData[3] = list.get(i).getItemId();
                rowData[4] = list.get(i).getItemName();
                rowData[5] = list.get(i).getUnit();
                rowData[6] = list.get(i).getQty();
                

                model.addRow(rowData);
            }
         invDb.inventoryUpdate(tranid, pdate, itemid, quantity  , 0);
         
        purDb.autoIdDetail();
        System.out.println("hi4");
        //tranIdpur.setText("");
        iUnt.setSelectedIndex(0);
        cmbItemName.setSelectedIndex(0);
        itemId.setText("");
        puQty.setText("");
       
            }
            
            
            
    }//GEN-LAST:event_purUpdateActionPerformed

    private void txtSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchActionPerformed

    }//GEN-LAST:event_txtSearchActionPerformed

    private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyReleased


            ArrayList <purchase> list = purchaseDb.TableGenerator();
            Object rowData[] = new Object[10];
            model =  (DefaultTableModel) purchaseTable.getModel();
            DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
            centerRenderer.setHorizontalAlignment( JLabel.CENTER );
            purchaseTable.getColumnModel().getColumn(0).setCellRenderer( centerRenderer );
            purchaseTable.getColumnModel().getColumn(1).setCellRenderer( centerRenderer );
            purchaseTable.getColumnModel().getColumn(2).setCellRenderer( centerRenderer );
            purchaseTable.getColumnModel().getColumn(3).setCellRenderer( centerRenderer );
            purchaseTable.getColumnModel().getColumn(4).setCellRenderer( centerRenderer );
            purchaseTable.getColumnModel().getColumn(5).setCellRenderer( centerRenderer );
            purchaseTable.getColumnModel().getColumn(6).setCellRenderer( centerRenderer );
           
            model.setRowCount(0);
            for(int i=0; i < list.size(); i++){

                rowData[0] = list.get(i).getTranId();
                rowData[1] = list.get(i).getPurId();
                rowData[2] = list.get(i).getDate();
                rowData[3] = list.get(i).getItemId();
                rowData[4] = list.get(i).getItemName();
                rowData[5] = list.get(i).getUnit();
                rowData[6] = list.get(i).getQty();
                

                model.addRow(rowData);
            }

    }//GEN-LAST:event_txtSearchKeyReleased

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        // TODO add your handling code here:
    }//GEN-LAST:event_formComponentResized


    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JComboBox<String> cmbItemName;
    public static javax.swing.JComboBox<String> iUnt;
    public static javax.swing.JTextField itemId;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private com.toedter.calendar.JDateChooser puDate;
    private javax.swing.JTextField puId;
    public static javax.swing.JTextField puQty;
    private javax.swing.JTextField puVat;
    private javax.swing.JButton purDelet;
    private javax.swing.JButton purInsert;
    private javax.swing.JButton purUpdate;
    private javax.swing.JTable purchaseTable;
    public static javax.swing.JTextField tranIdpur;
    public static javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables
}
