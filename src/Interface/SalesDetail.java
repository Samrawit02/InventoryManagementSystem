/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface;


import Model.sales;
import controller.MyConnection;
import controller.salesDb;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableModel;
import javax.swing.table.DefaultTableModel;
import controller.inventoryBalanceDb;
import controller.itemDb;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.text.DecimalFormat;


/**
 *
 * @author samrit
 */
public class SalesDetail extends javax.swing.JInternalFrame {

    /**
     * Creates new form SalesDetail
     */
    Connection con;
    PreparedStatement ps ;
    ResultSet rs;
    String itemName;
    String unit;
    salesDb salDb = new salesDb();
    PreparedStatement ps1;
    ResultSet rs1;
    float price;
    String saleId;
    String custName ;
    String itmId;
    String qty;
    String total;
    String pri;
    String trans;
    String subTotal;
    String totalAmo;
    String va;
    Date cadate;
    float salqty;
    String salesId;
    String sdate;
    int itemid;
    String iUnit;
    float quantity;
    double vat;
    float totalAmount;
    String transId;
    float tot;
    double subtot;
    float v = (float) 0.15 ;
    String salTransaction;
    float updatQty;
    inventoryBalanceDb invDb = new inventoryBalanceDb();
    itemDb itemDb = new itemDb();
    float currentqty ;
    int id;
    DefaultTableModel model ;
    DecimalFormat df=new DecimalFormat("0.00");
    
    public SalesDetail() {
        initComponents();
        salDb.autoIdDetail();
        
        Dimension screensize = Toolkit.getDefaultToolkit().getScreenSize();
        int width = (int)screensize.getWidth();
        int height = (int)screensize.getHeight();
        setSize(width-180, height-40);
        
        try{
           con = MyConnection.getConnection();
           String sql = "SELECT * FROM item ORDER BY itemName";
           ps = con.prepareStatement(sql);
           rs = ps.executeQuery();
           while(rs.next()){
               itemName = rs.getString("itemName");
               cmbItemN.addItem(itemName);
           }
           
       }catch (SQLException ex) {
          JOptionPane.showMessageDialog(null, ex);
        }
        
        
         }
         

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtTotal = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        searchTable = new javax.swing.JTable();
        txtSearch = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        salId = new javax.swing.JTextField();
        cusName = new javax.swing.JTextField();
        salDate = new com.toedter.calendar.JDateChooser();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        itemId = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        salQty = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        salPrice = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        salTotal = new javax.swing.JTextField();
        salUpdate = new javax.swing.JButton();
        salDelet = new javax.swing.JButton();
        cmbItemN = new javax.swing.JComboBox<>();
        iunt = new javax.swing.JComboBox<>();
        jLabel17 = new javax.swing.JLabel();
        transal = new javax.swing.JTextField();
        salInsert = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        salSubtotal = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        salVat = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        saltotalamount = new javax.swing.JLabel();
        saveUpdatedSales = new javax.swing.JButton();

        txtTotal.setText("jTextField1");
        txtTotal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtTotalMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                txtTotalMouseEntered(evt);
            }
        });
        txtTotal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTotalActionPerformed(evt);
            }
        });

        setPreferredSize(new java.awt.Dimension(1170, 670));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setPreferredSize(new java.awt.Dimension(1170, 670));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        searchTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "TransactionId","SalesId","Date","CustomerName","ItemId", "Item Name", "Unit", "Qty" ,"Price","Total"
            }
        ) {
            Class[] types = new Class[]{
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class,
                java.lang.Integer.class, java.lang.String.class, javax.swing.Icon.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }

            public Class getColumnClass(int columnIndex){
                return types [columnIndex];
            }

        });
        searchTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(searchTable);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 290, 1080, 110));

        txtSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchActionPerformed(evt);
            }
        });
        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchKeyReleased(evt);
            }
        });
        jPanel1.add(txtSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 250, 163, 30));

        jLabel1.setFont(new java.awt.Font("Sitka Small", 3, 14)); // NOI18N
        jLabel1.setText("Search");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 250, 73, 30));

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        jLabel8.setFont(new java.awt.Font("Sitka Small", 1, 14)); // NOI18N
        jLabel8.setText("Sales Id");

        jLabel9.setFont(new java.awt.Font("Sitka Small", 1, 14)); // NOI18N
        jLabel9.setText("Date");

        jLabel10.setFont(new java.awt.Font("Sitka Small", 1, 14)); // NOI18N
        jLabel10.setText("Customer Name");

        salId.setFont(new java.awt.Font("Sitka Small", 1, 14)); // NOI18N

        cusName.setColumns(2);
        cusName.setFont(new java.awt.Font("Sitka Small", 1, 14)); // NOI18N
        cusName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                cusNameKeyTyped(evt);
            }
        });

        salDate.setMinSelectableDate(new java.util.Date(-62135776718000L));

        jLabel11.setFont(new java.awt.Font("Sitka Small", 1, 14)); // NOI18N
        jLabel11.setText("Item Id");

        jLabel12.setFont(new java.awt.Font("Sitka Small", 1, 14)); // NOI18N
        jLabel12.setText("Item Name");

        jLabel13.setFont(new java.awt.Font("Sitka Small", 1, 14)); // NOI18N
        jLabel13.setText("Unit");

        itemId.setEditable(false);
        itemId.setColumns(11);
        itemId.setFont(new java.awt.Font("Sitka Small", 1, 14)); // NOI18N

        jLabel14.setFont(new java.awt.Font("Sitka Small", 1, 14)); // NOI18N
        jLabel14.setText("Quantity");

        salQty.setColumns(3);
        salQty.setFont(new java.awt.Font("Sitka Small", 1, 14)); // NOI18N
        salQty.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                salQtyKeyTyped(evt);
            }
        });

        jLabel15.setFont(new java.awt.Font("Sitka Small", 1, 14)); // NOI18N
        jLabel15.setText("Price");

        salPrice.setColumns(4);
        salPrice.setFont(new java.awt.Font("Sitka Small", 1, 14)); // NOI18N
        salPrice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                salPriceKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                salPriceKeyTyped(evt);
            }
        });

        jLabel16.setFont(new java.awt.Font("Sitka Small", 1, 14)); // NOI18N
        jLabel16.setText("Total");

        salTotal.setEditable(false);
        salTotal.setFont(new java.awt.Font("Sitka Small", 1, 14)); // NOI18N
        salTotal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salTotalActionPerformed(evt);
            }
        });

        salUpdate.setFont(new java.awt.Font("Sitka Small", 1, 14)); // NOI18N
        salUpdate.setText("Update");
        salUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salUpdateActionPerformed(evt);
            }
        });

        salDelet.setFont(new java.awt.Font("Sitka Small", 1, 14)); // NOI18N
        salDelet.setText("Delete");
        salDelet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salDeletActionPerformed(evt);
            }
        });

        cmbItemN.setFont(new java.awt.Font("Sitka Small", 1, 14)); // NOI18N
        cmbItemN.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Item Name" }));
        cmbItemN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbItemNActionPerformed(evt);
            }
        });
        cmbItemN.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cmbItemNKeyPressed(evt);
            }
        });

        iunt.setFont(new java.awt.Font("Sitka Small", 1, 14)); // NOI18N
        iunt.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Unit", "PCS", "KG", "SET", "PACKAGE" }));

        jLabel17.setFont(new java.awt.Font("Sitka Small", 1, 14)); // NOI18N
        jLabel17.setText("Transaction Id");

        transal.setEditable(false);
        transal.setColumns(10);
        transal.setFont(new java.awt.Font("Sitka Small", 1, 14)); // NOI18N

        salInsert.setFont(new java.awt.Font("Sitka Small", 1, 14)); // NOI18N
        salInsert.setText("Insert");
        salInsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salInsertActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cusName)
                    .addComponent(salDate, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE)
                    .addComponent(salId))
                .addGap(26, 26, 26)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel17)
                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(iunt, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbItemN, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(64, 64, 64)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel16, javax.swing.GroupLayout.DEFAULT_SIZE, 81, Short.MAX_VALUE)
                            .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(salPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(salTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(transal, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(137, 137, 137)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, 81, Short.MAX_VALUE))
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(salQty, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(itemId, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(salUpdate, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(salDelet, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(salInsert, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(56, 56, 56))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel11)
                                    .addComponent(itemId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(108, 108, 108))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                                .addComponent(salInsert, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(27, 27, 27)
                                .addComponent(salUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel16)
                            .addComponent(salTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(salDelet, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(transal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel17))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel13)
                                    .addComponent(iunt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                                .addComponent(salId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(salDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel14)
                                .addComponent(salQty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(cusName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12)
                            .addComponent(cmbItemN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel15)
                            .addComponent(salPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        jPanel3Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {salDate, salId});

        jPanel1.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 1090, -1));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jLabel2.setFont(new java.awt.Font("Sitka Small", 1, 18)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Sales Form");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(345, 345, 345)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 457, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(296, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
        );

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        jLabel5.setFont(new java.awt.Font("Sitka Small", 2, 14)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("SubTotal");

        salSubtotal.setFont(new java.awt.Font("Sitka Small", 2, 14)); // NOI18N
        salSubtotal.setForeground(new java.awt.Color(0, 102, 51));
        salSubtotal.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        salSubtotal.setText("0.00");
        salSubtotal.setToolTipText("");

        jLabel4.setFont(new java.awt.Font("Sitka Small", 2, 14)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Vat");

        salVat.setFont(new java.awt.Font("Sitka Small", 2, 14)); // NOI18N
        salVat.setForeground(new java.awt.Color(0, 102, 51));
        salVat.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        salVat.setText("0.00");
        salVat.setToolTipText("");

        jLabel3.setFont(new java.awt.Font("Sitka Small", 2, 14)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Total Amount");

        saltotalamount.setFont(new java.awt.Font("Sitka Small", 2, 14)); // NOI18N
        saltotalamount.setForeground(new java.awt.Color(0, 102, 51));
        saltotalamount.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        saltotalamount.setText("0.00");

        saveUpdatedSales.setFont(new java.awt.Font("Sitka Small", 3, 14)); // NOI18N
        saveUpdatedSales.setText("Save");
        saveUpdatedSales.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveUpdatedSalesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap(177, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel3)
                            .addComponent(jLabel5))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(salSubtotal, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(saltotalamount, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(salVat, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(26, 26, 26))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addComponent(saveUpdatedSales, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(169, 169, 169))))
        );

        jPanel4Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel3, jLabel4, jLabel5});

        jPanel4Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {salSubtotal, salVat, saltotalamount});

        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(salSubtotal)
                    .addComponent(jLabel5))
                .addGap(16, 16, 16)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(salVat)
                    .addComponent(jLabel4))
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(saltotalamount))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel3)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                .addComponent(saveUpdatedSales, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel4Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabel3, jLabel4, jLabel5, salSubtotal, salVat, saltotalamount});

        jPanel1.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 410, 430, 170));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
     public boolean verifText(){
            if( salId.getText().equals("")|| salDate.getDate()==null ||itemId.getText().equals("")||cusName.getText().isEmpty()
                    || salTotal.getText().isEmpty()
                 || cmbItemN.getSelectedIndex()==0  || iunt.getSelectedIndex()==0 || salQty.getText().equals(""))
                 
            {                  
                JOptionPane.showMessageDialog(null, "One or More Empty Field");

                
                 return false; 
        
            }
          
            
         return true;
     
    }     
     
    private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyReleased

        ArrayList<sales> list = salesDb.TableGenerator();
        Object rowData[] = new Object[10];
        model =  (DefaultTableModel) searchTable.getModel();
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment( JLabel.CENTER );
        searchTable.getColumnModel().getColumn(0).setCellRenderer( centerRenderer );
        searchTable.getColumnModel().getColumn(1).setCellRenderer( centerRenderer );
        searchTable.getColumnModel().getColumn(2).setCellRenderer( centerRenderer );
        searchTable.getColumnModel().getColumn(3).setCellRenderer( centerRenderer );
        searchTable.getColumnModel().getColumn(4).setCellRenderer( centerRenderer );
        searchTable.getColumnModel().getColumn(5).setCellRenderer( centerRenderer );
        searchTable.getColumnModel().getColumn(6).setCellRenderer( centerRenderer );
        searchTable.getColumnModel().getColumn(7).setCellRenderer( centerRenderer );
        searchTable.getColumnModel().getColumn(8).setCellRenderer( centerRenderer );
        searchTable.getColumnModel().getColumn(9).setCellRenderer( centerRenderer );
        model.setRowCount(0);
        for(int i=0; i < list.size(); i++){

            rowData[0] = list.get(i).getTrans();
            rowData[1] = list.get(i).getSalesId();
            rowData[2] = list.get(i).getDate();
            rowData[3] = list.get(i).getCustomerName();
            rowData[4] = list.get(i).getItemId();
            rowData[5] = list.get(i).getItemName();
            rowData[6] = list.get(i).getUnit();
            rowData[7] = list.get(i).getQty();
            rowData[8] = list.get(i).getPrice();
            rowData[9] = list.get(i).getTotal();

            model.addRow(rowData);
        }

       
    }//GEN-LAST:event_txtSearchKeyReleased

    private void searchTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchTableMouseClicked
        try {
            
  
            int selectedRow = searchTable.getSelectedRow();
            TableModel tm = searchTable.getModel();
            trans = tm.getValueAt(selectedRow, 0).toString();
            saleId = tm.getValueAt(selectedRow, 1).toString();
            custName = tm.getValueAt(selectedRow, 3).toString();
            itmId = tm.getValueAt(selectedRow, 4).toString();
            qty = tm.getValueAt(selectedRow, 7).toString();
            pri = tm.getValueAt(selectedRow, 8).toString();
            total = tm.getValueAt(selectedRow, 9).toString();
            itemName = tm.getValueAt(selectedRow,5).toString();
            unit = tm.getValueAt(selectedRow, 6).toString();
            
            
          //  Sales.Sales.salId.setText(salId);
            
             
            
            cadate = new SimpleDateFormat("yyyy-MM-dd").parse(tm.getValueAt(selectedRow, 2).toString());
            
            salId.setText(saleId);
            salDate.setDate(cadate);
            cusName.setText(custName);
            itemId.setText(itmId);
            salQty.setText(qty);
            salPrice.setText(pri);
            salTotal.setText(total);
            iunt.setSelectedItem(unit);
            transal.setText(trans);
            cmbItemN.setSelectedItem(itemName);
                           
            //salSubtotal.setText(unit);
           //  iUnt.setSelectedItem(tm.getValueAt(selectedRow, 4).toString());
            //Sales.cusName.setselectedItem();
            
     //       Sales.Sales.salId.setText(salId);
        } catch (ParseException ex) {
            Logger.getLogger(SalesDetail.class.getName()).log(Level.SEVERE, null, ex);
        }
       
    }//GEN-LAST:event_searchTableMouseClicked

    private void txtTotalMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtTotalMouseEntered
//        System.out.println("total 1");
//        int rowNo = salTable.getSelectedRow();
//         double qty = (double) salTable.getValueAt(rowNo, 3);
//         System.out.println("total 2");
//         double pric = (double) salTable.getValueAt(rowNo, 4);
//         double result = qty*pric;
//         salTable.setValueAt(result, rowNo, 5);
//         System.out.println("total 5");
    }//GEN-LAST:event_txtTotalMouseEntered

    private void txtTotalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTotalActionPerformed
//        System.out.println("total one");
//        
//        int rowNo = salTable.getSelectedRow();
//         double qty = (double) salTable.getValueAt(rowNo, 3);
//           System.out.println("total two");
//         double pric = (double) salTable.getValueAt(rowNo, 4);
//         double result = qty*pric;
//         salTable.setValueAt(result, rowNo, 5);
//           System.out.println("total five");
    }//GEN-LAST:event_txtTotalActionPerformed

    private void txtTotalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtTotalMouseClicked
//        System.out.println("total one");
//        
//        int rowNo = salTable.getSelectedRow();
//         double qty = (double) salTable.getValueAt(rowNo, 3);
//           System.out.println("total two");
//         double pric = (double) salTable.getValueAt(rowNo, 4);
//         String result = Double.toString(qty*pric);
//         salTable.setValueAt(result, rowNo, 5);
//         txtTotal.setText(result);
//           System.out.println("total five");
    }//GEN-LAST:event_txtTotalMouseClicked

    private void cusNameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cusNameKeyTyped
        if(cusName.getText().length() >= 30){
            evt.consume();
        }
    }//GEN-LAST:event_cusNameKeyTyped

    private void salQtyKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_salQtyKeyTyped

        char c = evt.getKeyChar();
        if(Character.isLetter(c)&&!evt.isAltDown()){
            evt.consume();
        }

    }//GEN-LAST:event_salQtyKeyTyped

    private void salPriceKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_salPriceKeyReleased
        if (salPrice.getText().isEmpty()){
            salPrice.setText("0");
        }
        if ((!salQty.getText().isEmpty())){
            quantity = Float.parseFloat(salQty.getText());
            price = Float.parseFloat(salPrice.getText());

            float tot = quantity * price;

            String tot1 =Float.toString(tot);

            salTotal.setText(tot1);

        }else{
            salTotal.setText("0");

        }
    }//GEN-LAST:event_salPriceKeyReleased

    private void salPriceKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_salPriceKeyTyped

        char c = evt.getKeyChar();
        if(Character.isLetter(c)&&!evt.isAltDown()){
            evt.consume();
        }
    }//GEN-LAST:event_salPriceKeyTyped

    private void salTotalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salTotalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_salTotalActionPerformed

    private void salUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salUpdateActionPerformed

        if(verifText()){

        transId = transal.getText();
        salesId =  salId.getText();
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        sdate = dateFormat.format(salDate.getDate());
        custName = cusName.getText();
        itemid =  Integer.parseInt(itemId.getText());
        quantity = Float.parseFloat(salQty.getText());
        price = Float.parseFloat(salPrice.getText());
        tot = Float.parseFloat(salTotal.getText());
        itemName = cmbItemN.getSelectedItem().toString();
        unit= iunt.getSelectedItem().toString();
        
//
            if(salDb.isSalesExist(salesId)){
               
                 salDb.updateSalesitem(transId, salesId, sdate, custName, itemid, quantity, price, tot);
                 invDb.inventoryUpdate(transId, sdate, itemid, 0 , quantity);
                 System.out.println("h2");
                
                    try{
                         con = MyConnection.getConnection();
                         PreparedStatement ps3 =  con.prepareStatement( "select itemId from salesitem where transactionDetalId = '"+transId+"'");
                         ResultSet    rs3= ps3.executeQuery();
                       if(rs3.next()){
                              id = rs3.getInt("itemId");
                         if(id == itemid ){
                                 System.out.println("if Close");
                                 
                                  currentqty = itemDb.getendQty(itemid);
                                  System.out.println(currentqty);
                                  salqty = salDb.getSalQty(transId);
                                  updatQty = (currentqty + salqty)- quantity;
                                  itemDb.updateqty(itemid, updatQty);
                                  
                        }
                             else{
                             
                                  currentqty = itemDb.getendQty(id);
                                  salqty = salDb.getSalQty(transId);
                                  updatQty = currentqty + salqty;
                               
                                  itemDb.updateqty(id, updatQty);
                                  currentqty = itemDb.getendQty(itemid);
                                  updatQty = currentqty - quantity;
                                  itemDb.updateqty(itemid, updatQty);

                              
                                                  }
                                         }

                        }catch(SQLException ex){
                            Logger.getLogger(SalesDetail.class.getName()).log(Level.SEVERE, null, ex);
                        }

         
        
                
        ArrayList<sales> list = salesDb.TableGenerator();
        Object rowData[] = new Object[10];
        model =  (DefaultTableModel) searchTable.getModel();
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment( JLabel.CENTER );
        searchTable.getColumnModel().getColumn(0).setCellRenderer( centerRenderer );
        searchTable.getColumnModel().getColumn(1).setCellRenderer( centerRenderer );
        searchTable.getColumnModel().getColumn(2).setCellRenderer( centerRenderer );
        searchTable.getColumnModel().getColumn(3).setCellRenderer( centerRenderer );
        searchTable.getColumnModel().getColumn(4).setCellRenderer( centerRenderer );
        searchTable.getColumnModel().getColumn(5).setCellRenderer( centerRenderer );
        searchTable.getColumnModel().getColumn(6).setCellRenderer( centerRenderer );
        searchTable.getColumnModel().getColumn(7).setCellRenderer( centerRenderer );
        searchTable.getColumnModel().getColumn(8).setCellRenderer( centerRenderer );
        searchTable.getColumnModel().getColumn(9).setCellRenderer( centerRenderer );
        model.setRowCount(0);
        for(int i=0; i < list.size(); i++){

            rowData[0] = list.get(i).getTrans();
            rowData[1] = list.get(i).getSalesId();
            rowData[2] = list.get(i).getDate();
            rowData[3] = list.get(i).getCustomerName();
            rowData[4] = list.get(i).getItemId();
            rowData[5] = list.get(i).getItemName();
            rowData[6] = list.get(i).getUnit();
            rowData[7] = list.get(i).getQty();
            rowData[8] = list.get(i).getPrice();
            rowData[9] = list.get(i).getTotal();

            model.addRow(rowData);
        }
        
        
        
        System.out.println("hi1");
        
       
                    }
            
        salDb.autoIdDetail();
        System.out.println("hi4");
        //transal.setText("");
        iunt.setSelectedIndex(0);
        cmbItemN.setSelectedIndex(0);
        itemId.setText("");
        salQty.setText("");
        salPrice.setText("");
        salTotal.setText("");
             float sum=0;
                        vat =0;
                        double tot=0;
                        for(int i=0; i < searchTable.getRowCount(); i++){
                            
                        sum = sum + Float.parseFloat(searchTable.getValueAt(i, 9).toString());
                        
                         vat =Math.round(sum * v)*100.0/100.0;
                      
                        tot = vat +sum;
                       
            
        }
  
   ///////////////////////////////////////////////////////////////////////////////
        salSubtotal.setText(df.format(sum));
        salVat.setText(df.format(vat));
        saltotalamount.setText(df.format(tot));
        }
    }//GEN-LAST:event_salUpdateActionPerformed

    private void salDeletActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salDeletActionPerformed
      
        transId = transal.getText();
        itemid =  Integer.parseInt(itemId.getText());
        salesId =  salId.getText();
        
        salDb.deleteSalesItem(transId);
        invDb.delete(transId);
        currentqty = itemDb.getendQty(itemid);
        updatQty = currentqty + quantity;
        System.out.println(updatQty);
        itemDb.updateqty(itemid, updatQty);
           
       JOptionPane.showMessageDialog(rootPane, "Successfully Deleted");
       
        ArrayList<sales> list = salesDb.TableGenerator();
        Object rowData[] = new Object[10];
        model =  (DefaultTableModel) searchTable.getModel();
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment( JLabel.CENTER );
        searchTable.getColumnModel().getColumn(0).setCellRenderer( centerRenderer );
        searchTable.getColumnModel().getColumn(1).setCellRenderer( centerRenderer );
        searchTable.getColumnModel().getColumn(2).setCellRenderer( centerRenderer );
        searchTable.getColumnModel().getColumn(3).setCellRenderer( centerRenderer );
        searchTable.getColumnModel().getColumn(4).setCellRenderer( centerRenderer );
        searchTable.getColumnModel().getColumn(5).setCellRenderer( centerRenderer );
        searchTable.getColumnModel().getColumn(6).setCellRenderer( centerRenderer );
        searchTable.getColumnModel().getColumn(7).setCellRenderer( centerRenderer );
        searchTable.getColumnModel().getColumn(8).setCellRenderer( centerRenderer );
        searchTable.getColumnModel().getColumn(9).setCellRenderer( centerRenderer );
        model.setRowCount(0);
        
        for(int i=0; i < list.size(); i++){

            rowData[0] = list.get(i).getTrans();
            rowData[1] = list.get(i).getSalesId();
            rowData[2] = list.get(i).getDate();
            rowData[3] = list.get(i).getCustomerName();
            rowData[4] = list.get(i).getItemId();
            rowData[5] = list.get(i).getItemName();
            rowData[6] = list.get(i).getUnit();
            rowData[7] = list.get(i).getQty();
            rowData[8] = list.get(i).getPrice();
            rowData[9] = list.get(i).getTotal();

            model.addRow(rowData);
        }
        
                        float sum=0;
                        vat =0;
                        double tot=0;
                        if(searchTable.getRowCount()==0){
                            salDb.deleteSales(salesId);
                        }
                        else{
                        for(int i=0; i < searchTable.getRowCount(); i++){
                            
                        sum = sum + Float.parseFloat(searchTable.getValueAt(i, 9).toString());
                        
                         vat = sum * v;
                       
                        tot = vat +sum;
            
        }
  
   ///////////////////////////////////////////////////////////////////////////////
   
   
        salSubtotal.setText(Float.toString(sum));
        salVat.setText(Double.toString(vat));
        saltotalamount.setText(Double.toString(tot));
                        }
        
        
      
    }//GEN-LAST:event_salDeletActionPerformed

    private void cmbItemNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbItemNActionPerformed
        try {
            salDb.CompoItemNameDetail();
        } catch (SQLException ex) {
            Logger.getLogger(Sales.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_cmbItemNActionPerformed

    private void cmbItemNKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmbItemNKeyPressed

    }//GEN-LAST:event_cmbItemNKeyPressed

    private void saveUpdatedSalesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveUpdatedSalesActionPerformed
        tot = Float.parseFloat(saltotalamount.getText());
        vat = Double.parseDouble(salVat.getText());
        subtot =Float.parseFloat(salSubtotal.getText());
        
        salDb.updateSales(salTransaction,  sdate, salesId, subtot, vat, tot);
       // System.out.println(salTransaction);
        salDb.autoIdDetail();
        //transal.setText("");
        iunt.setSelectedIndex(0);
        cmbItemN.setSelectedIndex(0);
        itemId.setText("");
        salQty.setText("");
        salPrice.setText("");
        salTotal.setText("");
        salDate.setDate(new Date());
        salId.setText("");
        cusName.setText("");
        
         while (model.getRowCount() >0){
            for(int i =0; i < model.getRowCount(); i++){
                model.removeRow(i);
            }
         }
    }//GEN-LAST:event_saveUpdatedSalesActionPerformed

    private void txtSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchActionPerformed

        try{
            con = MyConnection.getConnection();
          
            String search = txtSearch.getText();
            String query = "Select * from sales where salesId ='"+search+"'";
            ps = con.prepareStatement(query);
            rs = ps.executeQuery();
                      
            if(rs.next()){
                salTransaction = rs.getString("transaction_id");
                subTotal = rs.getString("amount");
                va = Float.toString(rs.getFloat("vat")); 
                totalAmo = Float.toString(rs.getFloat("totalAmount"));
                salSubtotal.setText(subTotal);
                salVat.setText(va);
                saltotalamount.setText(totalAmo);
                System.out.println(salTransaction);
               
            }
            else{
                JOptionPane.showMessageDialog(rootPane, "Can't find");
            }   

        } catch (SQLException ex) {
            Logger.getLogger(SalesDetail.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
          
          
    }//GEN-LAST:event_txtSearchActionPerformed

    private void salInsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salInsertActionPerformed
        if(verifText()){

        transId = transal.getText();
        salesId =  salId.getText();
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        sdate = dateFormat.format(salDate.getDate());
        custName = cusName.getText();
        itemid =  Integer.parseInt(itemId.getText());
        quantity = Float.parseFloat(salQty.getText());
        price = Float.parseFloat(salPrice.getText());
        tot = Float.parseFloat(salTotal.getText());
        itemName = cmbItemN.getSelectedItem().toString();
        unit= iunt.getSelectedItem().toString();
        
        if(!salDb.isTransactionExist(transId)){
            
         
          try {
            con = MyConnection.getConnection();
             
              ps  = con.prepareStatement( "select endQuantity from itemqtyreport where itemId= '"+itemid+"'" );
             
            rs= ps.executeQuery(); 
            
            if(rs.next()){
               
                currentqty= rs.getInt("endQuantity");
                System.out.println(currentqty);
                updatQty = currentqty - quantity;
                                            
         itemDb.updateqty(itemid, updatQty);
         salDb.insertSalesItem(transId, salesId, sdate, custName, itemid, quantity, price, tot);
         invDb.insertPurInventory(transId, sdate, itemid, 0 , quantity);
            }
                              
        ArrayList<sales> list = salesDb.TableGenerator();
        Object rowData[] = new Object[10];
        model =  (DefaultTableModel) searchTable.getModel();
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment( JLabel.CENTER );
        searchTable.getColumnModel().getColumn(0).setCellRenderer( centerRenderer );
        searchTable.getColumnModel().getColumn(1).setCellRenderer( centerRenderer );
        searchTable.getColumnModel().getColumn(2).setCellRenderer( centerRenderer );
        searchTable.getColumnModel().getColumn(3).setCellRenderer( centerRenderer );
        searchTable.getColumnModel().getColumn(4).setCellRenderer( centerRenderer );
        searchTable.getColumnModel().getColumn(5).setCellRenderer( centerRenderer );
        searchTable.getColumnModel().getColumn(6).setCellRenderer( centerRenderer );
        searchTable.getColumnModel().getColumn(7).setCellRenderer( centerRenderer );
        searchTable.getColumnModel().getColumn(8).setCellRenderer( centerRenderer );
        searchTable.getColumnModel().getColumn(9).setCellRenderer( centerRenderer );
        
        model.setRowCount(0);
        
        for(int i=0; i < list.size(); i++){

            rowData[0] = list.get(i).getTrans();
            rowData[1] = list.get(i).getSalesId();
            rowData[2] = list.get(i).getDate();
            rowData[3] = list.get(i).getCustomerName();
            rowData[4] = list.get(i).getItemId();
            rowData[5] = list.get(i).getItemName();
            rowData[6] = list.get(i).getUnit();
            rowData[7] = list.get(i).getQty();
            rowData[8] = list.get(i).getPrice();
            rowData[9] = list.get(i).getTotal();

            model.addRow(rowData);
            
        salDb.autoIdDetail();
        //transal.setText("");
        iunt.setSelectedIndex(0);
        cmbItemN.setSelectedIndex(0);
        itemId.setText("");
        salQty.setText("");
        salPrice.setText("");
        salTotal.setText("");
        
        }
                       float sum=0;
                        vat =0;
                        double tot=0;
                        if(searchTable.getRowCount()==0){
                            salDb.deleteSales(salesId);
                        }
                        else{
                        for(int i=0; i < searchTable.getRowCount(); i++){
                            
                        sum = sum + Float.parseFloat(searchTable.getValueAt(i, 9).toString());
                        
                         vat = sum * v;
                       
                        tot = vat +sum;
            
        }
  
   ///////////////////////////////////////////////////////////////////////////////
   
        salSubtotal.setText(df.format(sum));
        salVat.setText(df.format(vat));
        saltotalamount.setText(df.format(tot));
                        }
         
             } catch (SQLException ex) {
               Logger.getLogger(SalesDetail.class.getName()).log(Level.SEVERE, null, ex);
           }      
        }else{
            JOptionPane.showMessageDialog(rootPane, "Transaction Id  already Exist");
        }
         
        }
    }//GEN-LAST:event_salInsertActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JComboBox<String> cmbItemN;
    public static javax.swing.JTextField cusName;
    public static javax.swing.JTextField itemId;
    public static javax.swing.JComboBox<String> iunt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    public static com.toedter.calendar.JDateChooser salDate;
    private javax.swing.JButton salDelet;
    public static javax.swing.JTextField salId;
    private javax.swing.JButton salInsert;
    public static javax.swing.JTextField salPrice;
    public static javax.swing.JTextField salQty;
    private javax.swing.JLabel salSubtotal;
    public static javax.swing.JTextField salTotal;
    private javax.swing.JButton salUpdate;
    private javax.swing.JLabel salVat;
    private javax.swing.JLabel saltotalamount;
    private javax.swing.JButton saveUpdatedSales;
    private javax.swing.JTable searchTable;
    public static javax.swing.JTextField transal;
    public static javax.swing.JTextField txtSearch;
    public static javax.swing.JTextField txtTotal;
    // End of variables declaration//GEN-END:variables
}
